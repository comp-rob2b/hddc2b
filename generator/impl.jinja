{# SPDX-License-Identifier: MIT-0 -#}

{%- macro pltf_slv_dcmp_inv(conf, ns) %}
    double u[NUM_PLTF_COORD * NUM_PLTF_COORD];
    double s[NUM_PLTF_COORD];
    double vt[num_drv * NUM_G_COORD];
    hddc2b_pltf_dcmp(num_drv, {{ns.g}}, u, s, vt);

    double s_inv[NUM_PLTF_COORD];
    {% if conf["inverse"] == "pseudoinverse" -%}
    hddc2b_pltf_pinv(num_drv, eps, s, s_inv);
    {% elif conf["inverse"] == "damped-least-squares" -%}
    hddc2b_pltf_dmp(num_drv, eps, lambda, s, s_inv);
    {% else -%}
    #error "No inverse generated"
    {% endif %}
{%- endmacro -%}


{%- macro pltf_frc_w_pltf(conf) %}
{%- if (conf["preprocess-platform-weight"]) -%}
w_pltf
{%- else -%}
w_pltf_sqrt
{%- endif -%}
{%- endmacro -%}


{%- macro pltf_frc_w_drv(conf) %}
{%- if (conf["preprocess-drive-weight"]) -%}
w_drv
{%- else -%}
w_drv_inv_sqrt
{%- endif -%}
{%- endmacro -%}


{%- macro pltf_frc_pltf_to_drv_sig(conf) -%}
int num_drv,
double eps,
{% if conf["inverse"] == "damped-least-squares" %}double lambda,
{% endif %}const double *g,
{% if conf["weight-in-platform-space"] %}const double *{{pltf_frc_w_pltf(conf)}},
{% endif %}const double *f_pltf,
{% if conf["weight-in-drive-space"] %}const double *{{pltf_frc_w_drv(conf)}},
{% endif %}{% if conf["has-secondary-task"] %}const double *f_drv_ref,
{% endif %}double *f_drv
{%- endmacro -%}


{%- macro pltf_frc_w_pltf_sqrt(conf) -%}
    {%- if conf["preprocess-platform-weight"] -%}
    double w_pltf_sqrt[NUM_PLTF_COORD * NUM_PLTF_COORD];
    hddc2b_pltf_frc_w_pltf_sqrt(w_pltf, w_pltf_sqrt);
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_frc_w_drv_inv_sqrt(conf) -%}
    {%- if conf["preprocess-drive-weight"] %}
    double w_drv_inv_sqrt[num_drv * NUM_DRV_COORD * NUM_DRV_COORD];
    hddc2b_pltf_frc_w_drv_inv_sqrt(num_drv, w_drv, w_drv_inv_sqrt);
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_frc_sing_wgh(conf, ns) -%}
    {%- if conf["weight-in-platform-space"] %}
    double g2[num_drv * NUM_G_COORD];
    double f_pltf2[NUM_PLTF_COORD];
    hddc2b_pltf_frc_sing_wgh(num_drv, {{ns.g}}, {{ns.f_pltf}}, w_pltf_sqrt, g2, f_pltf2);
        {%- set ns.g = "g2" -%}
        {%- set ns.f_pltf = "f_pltf2" %}
    {% else -%}
        {%- set ns.g = "g" -%}
        {%- set ns.f_pltf = "f_pltf" -%}
    {%- endif -%}
{%- endmacro -%}


{%- macro pltf_frc_redu_ref_init(conf, ns) -%}
    {%- if conf["has-secondary-task"] %}
    double f_pltf3[NUM_PLTF_COORD];
    hddc2b_pltf_frc_redu_ref_init(num_drv, {{ns.g}}, {{ns.f_pltf}}, f_drv_ref, f_pltf3);
        {%- set ns.f_pltf = "f_pltf3" %}
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_frc_redu_wgh_init(conf, ns) -%}
    {%- if conf["weight-in-drive-space"] %}
    double g3[num_drv * NUM_G_COORD];
    hddc2b_pltf_frc_redu_wgh_init(num_drv, {{ns.g}}, w_drv_inv_sqrt, g3);
        {%- set ns.g = "g3" %}
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_frc_slv(conf, ns) %}
    {% if conf["weight-in-drive-space"] or conf["has-secondary-task"] -%}
    double f_drv2[num_drv * NUM_DRV_COORD];
    {% set ns.f_drv = "f_drv2" -%}
    {%- endif -%}
    hddc2b_pltf_frc_slv(num_drv, u, s_inv, vt, {{ns.f_pltf}}, {{ns.f_drv}});
    {%- if conf["weight-in-drive-space"] or conf["has-secondary-task"] %}
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_frc_redu_wgh_fini(conf, ns) -%}
    {%- if conf["weight-in-drive-space"] -%}
        {%- if conf["has-secondary-task"] %}
    double f_drv3[num_drv * NUM_DRV_COORD];
            {%- set f_drv_ = "f_drv3" -%}
        {%- else -%}
            {%- set f_drv_ = "f_drv" -%}
        {%- endif %}
    hddc2b_pltf_frc_redu_wgh_fini(num_drv, {{ns.f_drv}}, w_drv_inv_sqrt, {{f_drv_}});
        {%- if conf["has-secondary-task"] -%}
            {%- set ns.f_drv = "f_drv3" -%}
        {%- endif %}
        {%- if conf["has-secondary-task"] %}
        {% endif -%}
    {%- endif -%}
{%- endmacro -%}


{%- macro pltf_frc_redu_ref_fini(conf, ns) -%}
    {%- if conf["has-secondary-task"] %}
    hddc2b_pltf_frc_redu_ref_fini(num_drv, f_drv_ref, {{ns.f_drv}}, f_drv);
    {%- endif -%}
{%- endmacro -%}


{%- macro pltf_frc_pltf_to_drv(conf) %}
void {{conf.name}}(
{{pltf_frc_pltf_to_drv_sig(conf) | indent(width=8, first=true)}})
{
    assert(num_drv >= 0);

    const int NUM_DRV_COORD  = 2;
    const int NUM_PLTF_COORD = 3;
    const int NUM_G_COORD    = NUM_PLTF_COORD * NUM_DRV_COORD;
    {%- set ns = namespace(
                        g      = "g",
                        f_pltf = "f_pltf",
                        f_drv  = "f_drv") %}

    {{ pltf_frc_w_pltf_sqrt(conf) -}}
    {{- pltf_frc_w_drv_inv_sqrt(conf) -}}
    {{- pltf_frc_sing_wgh(conf, ns) -}}
    {{- pltf_frc_redu_ref_init(conf, ns) -}}
    {{- pltf_frc_redu_wgh_init(conf, ns) -}}
    {{- pltf_slv_dcmp_inv(conf, ns) -}}
    {{- pltf_frc_slv(conf, ns) -}}
    {{- pltf_frc_redu_wgh_fini(conf, ns) -}}
    {{- pltf_frc_redu_ref_fini(conf, ns) }}
}
{% endmacro -%}




{%- macro pltf_vel_w_pltf(conf) %}
{%- if (conf["preprocess-platform-weight"]) -%}
w_pltf
{%- else -%}
w_pltf_inv_sqrt
{%- endif -%}
{%- endmacro -%}


{%- macro pltf_vel_w_drv(conf) %}
{%- if (conf["preprocess-drive-weight"]) -%}
w_drv
{%- else -%}
w_drv_sqrt
{%- endif -%}
{%- endmacro -%}


{%- macro pltf_vel_drv_to_pltf_sig(conf) -%}
int num_drv,
double eps,
{% if conf["inverse"] == "damped-least-squares" %}double lambda,
{% endif %}const double *g,
{% if conf["weight-in-drive-space"] %}const double *{{pltf_vel_w_drv(conf)}},
{% endif %}const double *xd_drv,
{% if conf["weight-in-platform-space"] %}const double *{{pltf_vel_w_pltf(conf)}},
{% endif %}{% if conf["has-secondary-task"] %}const double *xd_pltf_ref,
{% endif %}double *xd_pltf
{%- endmacro -%}


{%- macro pltf_vel_w_pltf_inv_sqrt(conf) -%}
    {%- if conf["preprocess-platform-weight"] -%}
    double w_pltf_inv_sqrt[NUM_PLTF_COORD * NUM_PLTF_COORD];
    hddc2b_pltf_vel_w_pltf_inv_sqrt(w_pltf, w_pltf_inv_sqrt);
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_vel_w_drv_sqrt(conf) -%}
    {%- if conf["preprocess-drive-weight"] %}
    double w_drv_sqrt[num_drv * NUM_DRV_COORD * NUM_DRV_COORD];
    hddc2b_pltf_vel_w_drv_sqrt(num_drv, w_drv, w_drv_sqrt);
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_vel_sing_wgh(conf, ns) -%}
    {%- if conf["weight-in-drive-space"] %}
    double g2[num_drv * NUM_G_COORD];
    double xd_drv2[num_drv * NUM_DRV_COORD];
    hddc2b_pltf_vel_sing_wgh(num_drv, {{ns.g}}, {{ns.xd_drv}}, w_drv_sqrt, g2, xd_drv2);
        {%- set ns.g = "g2" -%}
        {%- set ns.xd_drv = "xd_drv2" %}
    {% else -%}
        {%- set ns.g = "g" -%}
        {%- set ns.xd_drv = "xd_drv" -%}
    {%- endif -%}
{%- endmacro -%}


{%- macro pltf_vel_redu_ref_init(conf, ns) -%}
    {%- if conf["has-secondary-task"] %}
    double xd_drv3[num_drv * NUM_DRV_COORD];
    hddc2b_pltf_vel_redu_ref_init(num_drv, {{ns.g}}, {{ns.xd_drv}}, xd_pltf_ref, xd_drv3);
        {%- set ns.xd_drv = "xd_drv3" %}
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_vel_redu_wgh_init(conf, ns) -%}
    {%- if conf["weight-in-platform-space"] %}
    double g3[num_drv * NUM_G_COORD];
    hddc2b_pltf_vel_redu_wgh_init(num_drv, {{ns.g}}, w_pltf_inv_sqrt, g3);
        {%- set ns.g = "g3" %}
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_vel_slv(conf, ns) %}
    {% if conf["weight-in-platform-space"] or conf["has-secondary-task"] -%}
    double xd_pltf2[NUM_PLTF_COORD];
    {% set ns.xd_pltf = "xd_pltf2" -%}
    {%- endif -%}
    hddc2b_pltf_vel_slv(num_drv, u, s_inv, vt, {{ns.xd_drv}}, {{ns.xd_pltf}});
    {%- if conf["weight-in-platform-space"] or conf["has-secondary-task"] %}
    {% endif -%}
{%- endmacro -%}


{%- macro pltf_vel_redu_wgh_fini(conf, ns) -%}
    {%- if conf["weight-in-platform-space"] -%}
        {%- if conf["has-secondary-task"] %}
    double xd_pltf3[NUM_PLTF_COORD];
            {%- set xd_pltf_ = "xd_pltf3" -%}
        {%- else -%}
            {%- set xd_pltf_ = "xd_pltf" -%}
        {%- endif %}
    hddc2b_pltf_vel_redu_wgh_fini(num_drv, {{ns.xd_pltf}}, w_pltf_inv_sqrt, {{xd_pltf_}});
        {%- if conf["has-secondary-task"] -%}
            {%- set ns.xd_pltf = "xd_pltf3" -%}
        {%- endif %}
        {%- if conf["has-secondary-task"] %}
        {% endif -%}
    {%- endif -%}
{%- endmacro -%}


{%- macro pltf_vel_redu_ref_fini(conf, ns) -%}
    {%- if conf["has-secondary-task"] %}
    hddc2b_pltf_vel_redu_ref_fini(num_drv, xd_pltf_ref, {{ns.xd_pltf}}, xd_pltf);
    {%- endif -%}
{%- endmacro -%}


{%- macro pltf_vel_drv_to_pltf(conf) %}
void {{conf.name}}(
{{pltf_vel_drv_to_pltf_sig(conf) | indent(width=8, first=true)}})
{
    assert(num_drv >= 0);

    const int NUM_DRV_COORD  = 2;
    const int NUM_PLTF_COORD = 3;
    const int NUM_G_COORD    = NUM_PLTF_COORD * NUM_DRV_COORD;
    {%- set ns = namespace(
                        g       = "g",
                        xd_drv  = "xd_drv",
                        xd_pltf = "xd_pltf") %}

    {{ pltf_vel_w_pltf_inv_sqrt(conf) -}}
    {{- pltf_vel_w_drv_sqrt(conf) -}}
    {{- pltf_vel_sing_wgh(conf, ns) -}}
    {{- pltf_vel_redu_ref_init(conf, ns) -}}
    {{- pltf_vel_redu_wgh_init(conf, ns) -}}
    {{- pltf_slv_dcmp_inv(conf, ns) -}}
    {{- pltf_vel_slv(conf, ns) -}}
    {{- pltf_vel_redu_wgh_fini(conf, ns) -}}
    {{- pltf_vel_redu_ref_fini(conf, ns) }}
}
{% endmacro -%}



#include <hddc2b/functions/platform.h>
#include <solver.h>
#include <assert.h>

{% for s in solvers -%}
{%- if s["quantity"] == "force" %}
{{pltf_frc_pltf_to_drv(s)}}
{% else %}
{{pltf_vel_drv_to_pltf(s)}}
{% endif -%}
{% endfor %}